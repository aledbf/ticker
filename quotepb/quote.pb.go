// Code generated by protoc-gen-go.
// source: quote.proto
// DO NOT EDIT!

/*
Package quotepb is a generated protocol buffer package.

It is generated from these files:
	quote.proto

It has these top-level messages:
	Quotes
	StockQuote
	Request
	Response
*/
package quotepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Quotes struct {
	StockQuotes []*StockQuote `protobuf:"bytes,1,rep,name=StockQuotes,json=stockQuotes" json:"StockQuotes,omitempty"`
}

func (m *Quotes) Reset()                    { *m = Quotes{} }
func (m *Quotes) String() string            { return proto.CompactTextString(m) }
func (*Quotes) ProtoMessage()               {}
func (*Quotes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Quotes) GetStockQuotes() []*StockQuote {
	if m != nil {
		return m.StockQuotes
	}
	return nil
}

type StockQuote struct {
	Name              string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Symbol            string  `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	LastPrice         float64 `protobuf:"fixed64,3,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	Change            float64 `protobuf:"fixed64,4,opt,name=change" json:"change,omitempty"`
	ChangePercent     float64 `protobuf:"fixed64,5,opt,name=change_percent,json=changePercent" json:"change_percent,omitempty"`
	Timestamp         string  `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	MarketCap         float64 `protobuf:"fixed64,7,opt,name=market_cap,json=marketCap" json:"market_cap,omitempty"`
	Volume            int64   `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`
	Change_YTD        float64 `protobuf:"fixed64,9,opt,name=change_YTD,json=changeYTD" json:"change_YTD,omitempty"`
	ChangePercent_YTD float64 `protobuf:"fixed64,10,opt,name=change_percent_YTD,json=changePercentYTD" json:"change_percent_YTD,omitempty"`
	High              float64 `protobuf:"fixed64,11,opt,name=high" json:"high,omitempty"`
	Low               float64 `protobuf:"fixed64,12,opt,name=low" json:"low,omitempty"`
	Open              float64 `protobuf:"fixed64,13,opt,name=open" json:"open,omitempty"`
}

func (m *StockQuote) Reset()                    { *m = StockQuote{} }
func (m *StockQuote) String() string            { return proto.CompactTextString(m) }
func (*StockQuote) ProtoMessage()               {}
func (*StockQuote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Request struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Response struct {
	Quote *StockQuote `protobuf:"bytes,1,opt,name=quote" json:"quote,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetQuote() *StockQuote {
	if m != nil {
		return m.Quote
	}
	return nil
}

func init() {
	proto.RegisterType((*Quotes)(nil), "quotepb.Quotes")
	proto.RegisterType((*StockQuote)(nil), "quotepb.StockQuote")
	proto.RegisterType((*Request)(nil), "quotepb.Request")
	proto.RegisterType((*Response)(nil), "quotepb.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Quoter service

type QuoterClient interface {
	Quote(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	QuoteStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Quoter_QuoteStreamClient, error)
}

type quoterClient struct {
	cc *grpc.ClientConn
}

func NewQuoterClient(cc *grpc.ClientConn) QuoterClient {
	return &quoterClient{cc}
}

func (c *quoterClient) Quote(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/quotepb.Quoter/Quote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoterClient) QuoteStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Quoter_QuoteStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Quoter_serviceDesc.Streams[0], c.cc, "/quotepb.Quoter/QuoteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoterQuoteStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Quoter_QuoteStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type quoterQuoteStreamClient struct {
	grpc.ClientStream
}

func (x *quoterQuoteStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Quoter service

type QuoterServer interface {
	Quote(context.Context, *Request) (*Response, error)
	QuoteStream(*Request, Quoter_QuoteStreamServer) error
}

func RegisterQuoterServer(s *grpc.Server, srv QuoterServer) {
	s.RegisterService(&_Quoter_serviceDesc, srv)
}

func _Quoter_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoterServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotepb.Quoter/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoterServer).Quote(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quoter_QuoteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoterServer).QuoteStream(m, &quoterQuoteStreamServer{stream})
}

type Quoter_QuoteStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type quoterQuoteStreamServer struct {
	grpc.ServerStream
}

func (x *quoterQuoteStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Quoter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quotepb.Quoter",
	HandlerType: (*QuoterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quote",
			Handler:    _Quoter_Quote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QuoteStream",
			Handler:       _Quoter_QuoteStream_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0xa5, 0xeb, 0xd6, 0xad, 0xb7, 0x4e, 0x66, 0x04, 0x09, 0xa2, 0xa0, 0x05, 0x61, 0x82, 0x0c,
	0x99, 0xee, 0xd9, 0x07, 0xfd, 0x80, 0xd9, 0xf9, 0xe2, 0xd3, 0xc8, 0x4a, 0xd8, 0xc6, 0xda, 0x26,
	0x6b, 0x32, 0xc5, 0xdf, 0xf6, 0x0b, 0x4c, 0x6e, 0x82, 0xdd, 0x1e, 0x04, 0xdf, 0xce, 0x3d, 0xe7,
	0x5c, 0x4e, 0xee, 0xbd, 0x81, 0x64, 0xbb, 0x13, 0x9a, 0x8f, 0x64, 0x2d, 0xb4, 0x20, 0x5d, 0x2c,
	0xe4, 0x22, 0x7d, 0x82, 0xe8, 0xd5, 0x42, 0x45, 0x26, 0x90, 0xcc, 0xb4, 0xc8, 0x37, 0xae, 0xa4,
	0xc1, 0x55, 0x38, 0x4c, 0xc6, 0xa7, 0x23, 0x6f, 0x1c, 0x35, 0x5a, 0x96, 0xa8, 0xc6, 0x97, 0x7e,
	0xb7, 0x00, 0x1a, 0x8d, 0x10, 0x68, 0x57, 0xac, 0xe4, 0xa6, 0x3d, 0x18, 0xc6, 0x19, 0x62, 0x72,
	0x06, 0x91, 0xfa, 0x2a, 0x17, 0xa2, 0xa0, 0x2d, 0x64, 0x7d, 0x45, 0x2e, 0x01, 0x0a, 0xa6, 0xf4,
	0x5c, 0xd6, 0xeb, 0x9c, 0xd3, 0xd0, 0x68, 0x41, 0x16, 0x5b, 0x66, 0x6a, 0x09, 0xdb, 0x96, 0xaf,
	0x58, 0xb5, 0xe4, 0xb4, 0x8d, 0x92, 0xaf, 0xc8, 0x0d, 0x1c, 0x3b, 0x34, 0x97, 0xbc, 0xce, 0x79,
	0xa5, 0x69, 0x07, 0xf5, 0xbe, 0x63, 0xa7, 0x8e, 0x24, 0x17, 0x10, 0xeb, 0x75, 0xc9, 0x95, 0x66,
	0xa5, 0xa4, 0x11, 0x06, 0x37, 0x84, 0xcd, 0x2e, 0x59, 0xbd, 0xe1, 0x7a, 0x9e, 0x33, 0x49, 0xbb,
	0x2e, 0xdb, 0x31, 0xcf, 0x4c, 0xda, 0xec, 0x0f, 0x51, 0xec, 0xcc, 0x20, 0x3d, 0x23, 0x85, 0x99,
	0xaf, 0x6c, 0x9b, 0xcf, 0x7e, 0x7f, 0x7b, 0xa1, 0xb1, 0x6b, 0x73, 0x8c, 0x21, 0xc8, 0x1d, 0x90,
	0xc3, 0xa7, 0xa1, 0x0d, 0xd0, 0x36, 0x38, 0x78, 0x9e, 0x75, 0x9b, 0x5d, 0xad, 0xd6, 0xcb, 0x15,
	0x4d, 0x50, 0x47, 0x4c, 0x06, 0x10, 0x16, 0xe2, 0x93, 0x1e, 0x21, 0x65, 0xa1, 0x75, 0x09, 0xc9,
	0x2b, 0xda, 0x77, 0x2e, 0x8b, 0xd3, 0x6b, 0xe8, 0x66, 0x7c, 0xbb, 0x33, 0xb3, 0xec, 0x2d, 0x37,
	0xd8, 0x5f, 0x6e, 0x3a, 0x81, 0x5e, 0xc6, 0x95, 0x14, 0x95, 0xe2, 0xe4, 0x16, 0x3a, 0x78, 0x46,
	0xb4, 0xfc, 0x71, 0x54, 0xe7, 0x18, 0x17, 0xfe, 0x3f, 0xd4, 0x66, 0x96, 0x8e, 0x3b, 0xe9, 0xe0,
	0xd7, 0xee, 0x33, 0xcf, 0x4f, 0xf6, 0x18, 0x1f, 0xf1, 0x08, 0x09, 0xba, 0x67, 0xba, 0xe6, 0xac,
	0xfc, 0x57, 0xcf, 0x7d, 0xb0, 0x88, 0xf0, 0x37, 0x3e, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x48,
	0xe6, 0xad, 0x4c, 0x9c, 0x02, 0x00, 0x00,
}
